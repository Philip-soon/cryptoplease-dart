{
  "Commitment": {
    "@type": "enum",
    "values": ["processed", "confirmed", "finalized"]
  },
  "TxStatus": {
    "@type": "Commitment"
  },
  "ValidatorIdentity": {
    "@type": "[]u64",
    "description": "First element represents the number of leader slots and second element is the number of blocks produced"
  },
  "RewardType": {
    "@type": "enum",
    "values": [
      "fee",
      "rent",
      "voting",
      "staking"
    ]
  },
  "StakeActivationState": {
    "@type": "enum",
    "values": [
      "active",
      "inactive",
      "activating",
      "deactivating"
    ]
  },
  "Account": {
    "lamports": {
      "type": "u64",
      "description": "number of lamports assigned to this account, as a u64"
    },
    "owner": {
      "type": "string",
      "description": "base-58 encoded Pubkey of the program this account has been assigned to"
    },
    "data": {
      "type": "[string, encoding]|object",
      "description": "data associated with the account, either as encoded binary data or JSON format {<program>: <state>}, depending on encoding parameter"
    },
    "executable": {
      "type": "boolean",
      "description": "boolean indicating if the account contains a program (and is strictly read-only)"
    },
    "rentEpoch": {
      "type": "u64",
      "description": "the epoch at which this account will next owe rent, as u64"
    }
  },
  "Block": {
    "blockhash": {
      "type": "string",
      "description": "the blockhash of this block, as base-58 encoded string"
    },
    "previousBlockhash": {
      "type": "string",
      "description": "the blockhash of this block's parent, as base-58 encoded string; if the parent block is not available due to ledger cleanup, this field will return \"11111111111111111111111111111111\""
    },
    "parentSlot": {
      "type": "u64",
      "description": "the slot index of this block's parent"
    },
    "transactions": {
      "type": "[]Transaction",
      "description": "present if \"full\" transaction details are requested; an array of JSON objects containing:"
    },
    "meta": {
      "type": "Meta",
      "description": "transaction status metadata object, containing None or",
      "nullable": true
    },
    "signatures": {
      "type": "[]string",
      "description": "present if \"signatures\" are requested for transaction details; an array of signatures strings, corresponding to the transaction order in the block"
    },
    "rewards": {
      "type": "[]Reward",
      "description": "present if rewards are requested; an array of JSON objects containing:"
    },
    "blockTime": {
      "type": "i64",
      "description": "estimated production time, as Unix timestamp (seconds since the Unix epoch). None if not available",
      "nullable": true
    },
    "blockHeight": {
      "type": "u64",
      "description": "the number of blocks beneath this block",
      "nullable": true
    }
  },
  "Meta": {
    "err": {
      "type": "object",
      "nullable": true,
      "description": "Error if transaction failed, null if transaction succeeded.",
      "link": {
        "label": "TransactionError definitions",
        "url": "https://github.com/solana-labs/solana/blob/master/sdk/src/transaction.rs#L24"
      }
    },
    "fee": {
      "type": "u64",
      "description": "fee this transaction was charged, as u64 integer"
    },
    "preBalances": {
      "type": "[]u64",
      "description": "array of u64 account balances from before the transaction was processed"
    },
    "postBalances": {
      "type": "[]u64",
      "description": "array of u64 account balances after the transaction was processed"
    },
    "innerInstructions": {
      "type": "[]InnerInstruction",
      "description": "List of inner instructions or omitted if inner instruction recording was not yet enabled during this transaction"
    },
    "preTokenBalances": {
      "type": "[]TokenBalance",
      "undefinable": true,
      "description": "List of token balances from before the transaction was processed or omitted if token balance recording was not yet enabled during this transaction"
    },
    "postTokenBalances": {
      "type": "[]TokenBalance",
      "undefinable": true,
      "description": "List of token balances from after the transaction was processed or omitted if token balance recording was not yet enabled during this transaction"
    },
    "logMessages": {
      "type": "[]string",
      "description": "array of string log messages or omitted if log message recording was not yet enabled during this transaction"
    }
  },
  "Reward": {
    "pubkey": {
      "type": "string",
      "description": "The public key, as base-58 encoded string, of the account that received the reward"
    },
    "lamports": {
      "type": "i64",
      "description": "number of reward lamports credited or debited by the account, as a i64"
    },
    "postBalance": {
      "type": "u64",
      "description": "account balance in lamports after the reward was applied"
    },
    "rewardType": {
      "type": "RewardType",
      "undefinable": true,
      "description": "type of reward: \"fee\", \"rent\", \"voting\", \"staking\""
    },
    "commission": {
      "type": "u8",
      "undefinable": true,
      "description": "vote account commission when the reward was credited, only present for voting and staking rewards"
    }
  },
  "Transaction": {
    "signatures": {
      "type": "[]string",
      "description": "A list of base-58 encoded signatures applied to the transaction. The list is always of length message.header.numRequiredSignatures and not empty. The signature at index i corresponds to the public key at index i in message.account_keys. The first one is used as the transaction id."
    },
    "message": {
      "type": "object",
      "description": "Defines the content of the transaction.",
      "fields": {
        "accountKeys": {
          "type": "[]string",
          "description": "List of base-58 encoded public keys used by the transaction, including by the instructions and for signatures. The first message.header.numRequiredSignatures public keys must sign the transaction."
        },
        "header": {
          "type": "object",
          "description": "Details the account types and signatures required by the transaction.",
          "fields": {
            "numRequiredSignatures": {
              "type": "int",
              "description": "The total number of signatures required to make the transaction valid. The signatures must match the first numRequiredSignatures of message.account_keys."
            },
            "numReadonlySignedAccounts": {
              "type": "int",
              "description": "The last numReadonlySignedAccounts of the signed keys are read-only accounts. Programs may process multiple transactions that load read-only accounts within a single PoH entry, but are not permitted to credit or debit lamports or modify account data. Transactions targeting the same read-write account are evaluated sequentially."
            },
            "numReadonlyUnsignedAccounts": {
              "type": "int",
              "description": "The last numReadonlyUnsignedAccounts of the unsigned keys are read-only accounts."
            }
          }
        },
        "recentBlockhash": {
          "type": "string",
          "description": "A base-58 encoded hash of a recent block in the ledger used to prevent transaction duplication and to give transactions lifetimes."
        },
        "instructions": {
          "type": "[]Instruction",
          "description": "List of program instructions that will be executed in sequence and committed in one atomic transaction if all succeed."
        }
      }
    }
  },
  "TransactionDetails": {
    "slot": {
      "type": "u64",
      "description": "the slot this transaction was processed in"
    },
    "transaction": {
      "type": "Transaction",
      "description": "Transaction object, either in JSON format or encoded binary data, depending on encoding parameter"
    },
    "blockTime": {
      "type": "i64",
      "nullable": true,
      "description": ""
    },
    "meta": {
      "type": "Meta",
      "description": "transaction status metadata"
    }
  },
  "InnerInstruction": {
    "index": {
      "type": "int",
      "description": "Index of the transaction instruction from which the inner instruction(s) originated"
    },
    "instruction": {
      "type": "[]Instruction",
      "description": "Ordered list of inner program instructions that were invoked during a single transaction instruction."
    }
  },
  "Instruction": {
    "programIdIndex": {
      "type": "int",
      "description": "Index into the message.accountKeys array indicating the program account that executes this instruction."
    },
    "accounts": {
      "type": "[]int",
      "description": "List of ordered indices into the message.accountKeys array indicating which accounts to pass to the program."
    },
    "data": {
      "type": "string",
      "description": "The program input data encoded in a base-58 string."
    }
  },
  "TokenBalance": {
    "accountIndex": {
      "type": "int",
      "description": "Index of the account in which the token balance is provided for."
    },
    "mint": {
      "type": "string",
      "description": "Pubkey of the token's mint."
    },
    "uiTokenAmount": {
      "type": "object",
      "description": "Token balance",
      "fields": {
        "amount": {
          "type": "string",
          "description": "Raw amount of tokens as a string, ignoring decimals."
        },
        "decimals": {
          "type": "int",
          "description": "Number of decimals configured for token's mint."
        },
        "uiAmountString": {
          "type": "string",
          "nullable": true,
          "description": "Token amount as a string, accounting for decimals."
        }
      }
    }
  },
  "ClusterNode": {
    "pubkey": {
      "type": "string",
      "description": "Node public key, as base-58 encoded string"
    },
    "gossip": {
      "type": "string",
      "description": "Gossip network address for the node"
    },
    "tpu": {
      "type": "string",
      "description": "TPU network address for the node"
    },
    "rpc": {
      "type": "string",
      "nullable": true,
      "description": "JSON RPC network address for the node, or null if the JSON RPC service is not enabled"
    },
    "version": {
      "type": "string",
      "nullable": true,
      "description": "The software version of the node, or null if the version information is not available"
    },
    "featureSet": {
      "type": "int",
      "nullable": true,
      "description": "The unique identifier of the node's feature set"
    },
    "shredVersion": {
      "type": "int",
      "nullable": true,
      "description": "The shred version the node has been configured to use"
    }
  },
  "EpochInfo": {
    "absoluteSlot": {
      "type": "u64",
      "description": "the current slot"
    },
    "blockHeight": {
      "type": "u64",
      "description": "the current block height"
    },
    "epoch": {
      "type": "u64",
      "description": "the current epoch"
    },
    "slotIndex": {
      "type": "u64",
      "description": "the current slot relative to the start of the current epoch"
    },
    "slotsInEpoch": {
      "type": "u64",
      "description": "the number of slots in this epoch"
    }
  },
  "FeeCalculator": {
    "feeCalculator": {
      "type": "object",
      "description": "FeeCalculator object",
      "fields": {
        "lamportsPerSignature": {
          "type": "u64",
          "description": "number of lamports per signature in a transaction"
        }
      }
    }
  },
  "BlockProduction": {
    "byIdentity": {
      "type": "map[string]ValidatorIdentity",
      "description": "a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced."
    },
    "range": {
      "type": "object",
      "description": "Block production slot range",
      "fields": {
        "firstSlot": {
          "type": "u64",
          "description": "first slot of the block production information (inclusive)"
        },
        "lastSlot": {
          "type": "u64",
          "description": "last slot of block production information (inclusive)"
        }
      }
    }
  },
  "BlockCommitment": {
    "commitment": {
      "type": "[]u64",
      "nullable": true,
      "description": "commitment, array of u64 integers logging the amount of cluster stake in lamports that has voted on the block at each depth from 0 to MAX_LOCKOUT_HISTORY + 1"
    },
    "totalStake": {
      "type": "u64",
      "description": "total active stake, in lamports, of the current epoch"
    }
  },
  "EpochSchedule": {
    "slotsPerEpoch": {
      "type": "u64",
      "description": "the maximum number of slots in each epoch"
    },
    "leaderScheduleSlotOffset": {
      "type": "u64",
      "description": "the number of slots before beginning of an epoch to calculate a leader schedule for that epoch"
    },
    "warmup": {
      "type": "bool",
      "description": "whether epochs start short and grow"
    },
    "firstNormalEpoch": {
      "type": "u64",
      "description": "first normal-length epoch, log2(slotsPerEpoch) - log2(MINIMUM_SLOTS_PER_EPOCH)"
    },
    "firstNormalSlot": {
      "type": "u64",
      "description": "MINIMUM_SLOTS_PER_EPOCH * (2.pow(firstNormalEpoch) - 1)"
    }
  },
  "FeeRateGovernor": {
    "feeRateGovernor": {
      "type": "object",
      "description": "",
      "fields": {
        "burnPercent": {
          "type": "u8",
          "description": "Percentage of fees collected to be destroyed"
        },
        "maxLamportsPerSignature": {
          "type": "u64",
          "description": "Largest value lamportsPerSignature can attain for the next slot"
        },
        "minLamportsPerSignature": {
          "type": "u64",
          "description": "Smallest value lamportsPerSignature can attain for the next slot"
        },
        "targetLamportsPerSignature": {
          "type": "u64",
          "description": "Desired fee rate for the cluster"
        },
        "targetSignaturesPerSlot": {
          "type": "u64",
          "description": "Desired signature rate for the cluster"
        }
      }
    }
  },
  "Fees": {
    "blockhash": {
      "type": "string",
      "description": "a Hash as base-58 encoded string"
    },
    "feeCalculator": {
      "type": "FeeCalculator",
      "description": "FeeCalculator object, the fee schedule for this block hash"
    },
    "lastValidBlockHeight": {
      "type": "u64",
      "description": "last block height at which a blockhash will be valid"
    }
  },
  "Identity": {
    "identity": {
      "type": "string",
      "description": "the identity pubkey of the current node (as a base-58 encoded string)"
    }
  },
  "InflationGovernor": {
    "initial": {
      "type": "f64",
      "description": "the initial inflation percentage from time 0"
    },
    "terminal": {
      "type": "f64",
      "description": "terminal inflation percentage"
    },
    "taper": {
      "type": "f64",
      "description": "rate per year at which inflation is lowered.\\nRate reduction is derived using the target slot time in genesis config"
    },
    "foundation": {
      "type": "f64",
      "description": "percentage of total inflation allocated to the foundation"
    },
    "foundationTerm": {
      "type": "f64",
      "description": "duration of foundation pool inflation in years"
    }
  },
  "InflationRate": {
    "total": {
      "type": "f64",
      "description": "total inflation"
    },
    "validator": {
      "type": "f64",
      "description": "inflation allocated to validators"
    },
    "foundation": {
      "type": "f64",
      "description": "inflation allocated to the foundation"
    },
    "epoch": {
      "type": "f64",
      "description": "epoch for which these values are valid"
    }
  },
  "InflationReward": {
    "epoch": {
      "type": "u64",
      "description": "epoch for which reward occurred"
    },
    "effectiveSlot": {
      "type": "u64",
      "description": "the slot in which the rewards are effective"
    },
    "amount": {
      "type": "u64",
      "description": "reward amount in lamports"
    },
    "postBalance": {
      "type": "u64",
      "description": "post balance of the account in lamports"
    },
    "commission": {
      "type": "u8",
      "undefinable": true,
      "description": "vote account commission when the reward was credited"
    }
  },
  "LargeAccount": {
    "address": {
      "type": "string",
      "description": "base-58 encoded address of the account"
    },
    "lamports": {
      "type": "u64",
      "description": "number of lamports in the account, as a u64"
    }
  },
  "LeaderSchedule": "map[string][]u64",
  "Filter": {
    "memcmp": {
      "type": "object",
      "description": "compares a provided series of bytes with program account data at a particular offset.",
      "fields": {
        "offset": {
          "type": "u64",
          "description": "offset into program account data to start comparison"
        },
        "bytes": {
          "type": "string",
          "description": "data to match, as base-58 encoded string and limited to less than 129 bytes"
        }
      },
      "undefinable": true
    },
    "dataSize": {
      "type": "u64",
      "description": "compares the program account data length with the provided data size",
      "undefinable": true
    }
  },
  "ProgramAccount": {
    "account": {
      "type": "Account",
      "description": "the account information for this program account"
    },
    "pubkey": {
      "type": "string",
      "description": "the account Pubkey as base-58 encoded string"
    }
  },
  "RecentBlockhash": {
    "blockhash": {
      "type": "string",
      "description": "a Hash as base-58 encoded string"
    },
    "feeCalculator": {
      "type": "FeeCalculator",
      "description": "FeeCalculator object, the fee schedule for this block hash"
    }
  },
  "PerfSample": {
    "slot": {
      "type": "u64",
      "description": "Slot in which sample was taken at"
    },
    "numTransactions": {
      "type": "u64",
      "description": "Number of transactions in sample"
    },
    "numSlots": {
      "type": "u64",
      "description": "Number of slots in sample"
    },
    "samplePeriodSec": {
      "type": "u16",
      "description": "Number of seconds in a sample window\nExample"
    }
  },
  "TransactionSignatureInformation": {
    "signature": {
      "type": "string",
      "description": "transaction signature as base-58 encoded string"
    },
    "slot": {
      "type": "u64",
      "description": "The slot that contains the block with the transaction"
    },
    "err": {
      "type": "object",
      "nullable": true,
      "description": "Error if transaction failed, null if transaction succeeded. TransactionError definitions"
    },
    "memo": {
      "type": "string",
      "nullable": true,
      "description": "Memo associated with the transaction, null if no memo is present"
    },
    "blockTime": {
      "type": "i64",
      "nullable": true,
      "description": "estimated production time, as Unix timestamp (seconds since the Unix epoch) of when transaction was processed. null if not available."
    }
  },
  "SignatureStatus": {
    "slot": {
      "type": "u64",
      "description": "The slot the transaction was processed"
    },
    "confirmations": {
      "type": "u64",
      "nullable": true,
      "description": "Number of blocks since signature confirmation, null if rooted, as well as finalized"
    },
    "err": {
      "type": "object",
      "nullable": true,
      "description": "Error if transaction failed, null if transaction succeeded.",
      "link": {
        "label": "TransactionError definitions",
        "url": "https://github.com/solana-labs/solana/blob/master/sdk/src/transaction.rs#L24"
      }
    },
    "confirmationStatus": {
      "type": "TxStatus",
      "description": "The transaction's cluster confirmation status; either processed, confirmed, or finalized. See Commitment for more on optimistic confirmation."
    }
  },
  "StakeActivation": {
    "state": {
      "type": "StakeActivationState",
      "description": "stake account's activation state, one of: active, inactive, activating, deactivating"
    },
    "active": {
      "type": "u64",
      "description": "stake active during the epoch"
    },
    "inactive": {
      "type": "u64",
      "description": "stake inactive during the epoch"
    }
  },
  "Supply": {
    "total": {
      "type": "u64",
      "description": "Total supply in lamports"
    },
    "circulating": {
      "type": "u64",
      "description": "Circulating supply in lamports"
    },
    "nonCirculating": {
      "type": "u64",
      "description": "Non-circulating supply in lamports"
    },
    "nonCirculatingAccounts": {
      "type": "[]string",
      "description": "an array of account addresses of non-circulating accounts, as strings. If excludeNonCirculatingAccountsList is enabled, the returned array will be empty."
    }
  },
  "SolanaVersion": {
    "solana-core": {
      "type": "string",
      "description": "software version of solana-core"
    },
    "feature-set": {
      "type": "int",
      "description": "unique identifier of current feature set"
    }
  },
  "VoteAccounts": {
    "votePubkey": {
      "type": "string",
      "description": "Vote account address, as base-58 encoded string"
    },
    "nodePubkey": {
      "type": "string",
      "description": "Validator identity, as base-58 encoded string"
    },
    "activatedStake": {
      "type": "u64",
      "description": "the stake, in lamports, delegated to this vote account and active in this epoch"
    },
    "epochVoteAccount": {
      "type": "bool",
      "description": "bool, whether the vote account is staked for this epoch"
    },
    "commission": {
      "type": "int",
      "description": "percentage (0-100) of rewards payout owed to the vote account"
    },
    "lastVote": {
      "type": "u64",
      "description": "Most recent slot voted on by this vote account"
    },
    "epochCredits": {
      "type": "[]u64",
      "description": "History of how many credits earned by the end of each epoch, as an array of arrays containing: [epoch, credits, previousCredits]"
    }
  },
  "TransactionStatus": {
    "err": {
      "type": "object",
      "nullable": true,
      "description": "Error if transaction failed, null if transaction succeeded.",
      "link": {
        "label": "TransactionError definitions",
        "url": "https://github.com/solana-labs/solana/blob/master/sdk/src/transaction.rs#L24"
      }
    },
    "logs": {
      "type": "[]string",
      "nullable": true,
      "description": " Array of log messages the transaction instructions output during execution, null if simulation failed before the transaction was able to execute (for example due to an invalid blockhash or signature verification failure)"
    },
    "accounts": {
      "type": "[]Account",
      "nullable": true,
      "description": "array of accounts with the same length as the accounts.addresses array in the request"
    }
  }
}
